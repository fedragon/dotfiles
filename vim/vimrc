""" Vundle settings
set shell=/bin/bash                       " required if using another shell
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"""""""""""""""
""" Plugins """
"""""""""""""""

Plugin 'gmarik/Vundle.vim'                " Plugin manager
Plugin 'kien/rainbow_parentheses.vim'     " Colorful parentheses
Plugin 'nanotech/jellybeans.vim'          " Color scheme
Plugin 'scrooloose/syntastic'             " Syntax highlighting
Plugin 'terryma/vim-expand-region'        " Expand selection
Plugin 'tpope/vim-surround'               " Surround words
Plugin 'tpope/vim-vinegar'                " Improved file explorer
Plugin 'godlygeek/tabular'                " Tabularizing made easy

" Unite.vim
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimproc.vim'               " Required dependency

" Git integration
Plugin 'mhinz/vim-signify'                " Git info in gutter
Plugin 'tpope/vim-fugitive'               " Git integration

" Haskell
Plugin 'bitc/vim-hdevtools'               " Provide type information
Plugin 'eagletmt/ghcmod-vim'              " Load buffer in ghc, infer types
Plugin 'eagletmt/neco-ghc'                " Auto completion
Plugin 'vim-scripts/Haskell-Conceal'      " Replace characters with unicode equivalents
Plugin 'wlangstroth/vim-haskell'          " syntax highlighting

" Javascript
Plugin 'jelera/vim-javascript-syntax'     " Syntax highlighting
Plugin 'nathanaelkane/vim-indent-guides'  " Show indent guides
Plugin 'pangloss/vim-javascript'          " Highlighting + better indentation
Plugin 'walm/jshint.vim'                  " Hints

" Angular
Plugin 'burnettk/vim-angular'

" SASS
Plugin 'tpope/vim-haml'

" Fish
Plugin 'vim-scripts/fish-syntax'

" Notes
Plugin 'xolox/vim-notes'
Plugin 'xolox/vim-misc'                   " Required dependency

" Scala
Plugin 'derekwyatt/vim-scala'

" Clojure
Plugin 'guns/vim-clojure-static'          " Syntax highlighting, indentation, etc
Plugin 'tpope/vim-fireplace'              " Evaluate code from a running repl
Plugin 'tpope/vim-projectionist'
Plugin 'vim-scripts/paredit.vim'          " Easy parens management

cal vundle#end()
filetype plugin indent on

""""""""""""""""""""""""
""" General settings """
""""""""""""""""""""""""

syntax on                   " Enable syntax highlighting
set t_Co=256                " Set terminal colours
set backspace=2
set number                  " Enable line numbers
set autoread                " Refresh buffers if they were changed from outside
set autowriteall            " Save on buffer switch
set splitright              " Split new buffers to the right
set mouse=a                 " Enable mouse
set encoding=utf8
set guifont=Source\ Code\ Pro\ for\ Powerline:h14
set nowrap

set nocursorline            " Don't paint cursor line (scrolling becomes painfully slow)
set nocursorcolumn          " Don't paint cursor column (scrolling becomes painfully slow)
set lazyredraw              " Wait to redraw

set hlsearch                " Highlight search matches
set incsearch               " Highlight search matches as you type

set ignorecase              " Ignore case when searching
set smartcase               " Ignore case if pattern is lowercase, case-sensitive otherwise

set nobackup                " Disable backup
set directory=~/.vim/tmp    " Temporary swap files directory

set nolist                  " Do not highlight whitespaces by default
set listchars=tab:▸\ ,eol:¬ " Display tabs as ▸, end of line as `¬`

set guioptions+=a           " Copy highlighted text to system clipboard
set guioptions-=r           " Remove scrollbars
set guioptions-=L

set noshowmode              " Hide the default mode text

colorscheme jellybeans      " Set default color scheme

set tabstop=2               " Soft tab indentation with 2 spaces
set shiftwidth=2

set smarttab
set expandtab               " Use spaces instead of tabs

set laststatus=2            " Always show status bar

set clipboard=unnamed

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set guitablabel=%M\ %t
endif

""""""""""""""""""""""""""""""""
""" Plugin-specific settings """
""""""""""""""""""""""""""""""""

""" Powerline """
source /usr/local/lib/python2.7/site-packages/powerline/bindings/vim/plugin/powerline.vim

""" Syntastic """
let g:syntastic_auto_loc_list=1

" Disable syntax checking for sbt files
let g:syntastic_mode_map = { "mode": "active", "passive_filetypes": ["sbt"] }

map <silent> <leader>e :Errors<CR>
map <leader>s :SyntasticToggleMode<CR>

""" Unite """
let g:unite_source_history_yank_enable = 1
call unite#custom#source('file,file/new,buffer,file_rec,file_rec/async', 'matchers', 'matcher_fuzzy')
call unite#custom#source('file,file/new,buffer,file_rec,file_rec/async', 'sorters', 'sorter_rank')

call unite#custom#source('file,file_rec,file_rec/async', 'ignore_pattern',
      \'tmp\|vendor\|\.bundle\|target\|\.git')

function! UniteClearCache()
  let result = system("rm ~/.cache/unite -rf")
endfunction
command! UniteClearCache call UniteClearCache()

autocmd FileType unite call s:unite_settings()

function! s:unite_settings()
  let b:SuperTabDisabled=1
  imap <buffer><C-j> <Plug>(unite_select_next_line)
  imap <buffer><C-k> <Plug>(unite_select_previous_line)

  imap <silent><buffer><expr> <C-s> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  nmap <silent><buffer><expr> <C-s> unite#do_action('split')
  nmap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

  nmap <buffer> <Esc> <Plug>(unite_exit)
endfunction

nnoremap <C-p> :Unite -buffer-name=files -start-insert file_rec/async:!<cr>
nnoremap <C-n> :Unite grep:.<cr>

""" vim-notes """
:let g:notes_directories = ['~/Notes']

""" Rainbow parentheses """
au VimEnter * RainbowParenthesesActivate
au Syntax   * RainbowParenthesesLoadRound
au Syntax   * RainbowParenthesesLoadSquare
au Syntax   * RainbowParenthesesLoadBraces

""" Paredit """
let g:paredit_leader          = '\'
let g:paredit_electric_return = 1   " Insert an empty line if Enter is pressed before a closing paren
let g:paredit_smartjump       = 1   " When pressing '(' jump to the nearest '(', '[', '{'

" Enable short mappings only for Clojure files (to avoid J, O and other mappings to be permanently overwritten)
au Filetype clojure let g:paredit_shortmaps=1

""" vim-expand-selection """
vmap     v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

""""""""""""""""
""" Mappings """
""""""""""""""""

" Quickly edit and source ~/.vimrc
nmap <silent> <leader>ev :tabnew $MYVIMRC<CR>
nmap <silent> <leader>es :so $MYVIMRC<CR>

" Use ; to write commands, insteaf of :
nnoremap ; :

" go back to Normal Mode
inoremap jk <Esc>

" clear search highlightings
nmap <silent> <leader>q :nohlsearch<CR>

" toggle whitespaces/end of line display
nnoremap <leader>l :set list!<CR>

" copy text to "+ (clipboard)
nmap <Leader>yy "+yy
vmap <Leader>y "+y

" paste text from "+ (clipboard)
map  <Leader>p "+p
vmap <Leader>p "+p

" resize split panes with arrows
if bufwinnr(1)
  nmap <Up> <C-w>+
  nmap <Down> <C-w>-
  nmap <Right> <C-w>>
  nmap <Left> <C-w><
endif

" Buffer navigation
" nnoremap be :enew<CR>
" nnoremap bl :bnext<CR>
" nnoremap bh :bprevious<CR>
" nnoremap bq :bdelete<CR>

"""""""""""""""""""""""""""
""" File types settings """
"""""""""""""""""""""""""""

" Provide autocompletion options for tags in css, html files
" (triggered with <C-x><C-o>)
autocmd FileType css  set omnifunc=htmlcomplete#CompleteTags
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

" Set filetype
au BufRead,BufNewFile *.md        setlocal filetype=markdown
au BufRead,BufNewFile *.scala     setlocal filetype=scala
au BufRead,BufNewFile *.sbt       setlocal filetype=sbt

""""""""""""""""""""""""""""""""""
""" File manipulation settings """
""""""""""""""""""""""""""""""""""

" Remove trailing whitespaces on save
autocmd BufWritePre *.* :%s/\s\+$//e

" Reload when entering buffer or gaining focus
au FocusGained,BufEnter * :silent! !

" Autosave on focus lost or when exiting the buffer
au FocusLost,WinLeave * :silent! w

