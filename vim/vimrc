""" Vundle settings
set shell=/bin/bash                       " required if using another shell
set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

"""""""""""""""
""" Plugins """
"""""""""""""""

Plug 'ervandew/supertab'                " Autocomplete with Tab
Plug 'godlygeek/tabular'                " Tabularize text
Plug 'kien/rainbow_parentheses.vim'     " Colorful parentheses
Plug 'rking/ag.vim'                     " Better grep
Plug 'Raimondi/delimitMate'             " Auto-close brackets
Plug 'scrooloose/nerdcommenter'         " Block comments
Plug 'scrooloose/syntastic'             " Syntax highlighting
" Plug 'takac/vim-hardtime'               " Remove bad motion habits
Plug 'terryma/vim-expand-region'        " Expand selection
Plug 'tpope/vim-vinegar'                " Improved file explorer

" Color schemes
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'

" Unite.vim
Plug 'Shougo/vimproc.vim', {'do': 'make'} " Required dependency
Plug 'Shougo/unite.vim'                   " Find files, grep & more
Plug 'Shougo/neomru.vim'                  " Show recently opened files

" Git integration
Plug 'mhinz/vim-signify'                " Git info in gutter
Plug 'tpope/vim-fugitive'               " Git integration

" Javascript
Plug 'jelera/vim-javascript-syntax'   , {'for': 'javascript'}  " Syntax highlighting
Plug 'nathanaelkane/vim-indent-guides', {'for': 'javascript'}  " Show indent guides
Plug 'pangloss/vim-javascript'        , {'for': 'javascript'}  " Highlighting + better indentation
Plug 'walm/jshint.vim'                , {'for': 'javascript'}  " Hints

" SASS
Plug 'tpope/vim-haml'

" Fish
Plug 'vim-scripts/fish-syntax'

" Notes
Plug 'xolox/vim-notes'
Plug 'xolox/vim-misc'                   " Required dependency

" Scala
Plug 'derekwyatt/vim-scala'          , {'for': 'scala'}      " Basic syntax highlighting
Plug 'fedragon/vim-scalaConceal'     , {'for': 'scala'}      " Fancy unicode symbols for Scala

" Clojure
Plug 'fwolanski/vim-clojure-conceal' , {'for': 'clojure'}    " Fancy unicode symbols for Clojure
Plug 'guns/vim-clojure-highlight'    , {'for': 'clojure'}    " Improved syntax highlighting
Plug 'guns/vim-clojure-static'       , {'for': 'clojure'}    " Clojure syntax, basic indentation, indentation
Plug 'tpope/vim-fireplace'           , {'for': 'clojure'}    " Evaluate code from a running repl
Plug 'vim-scripts/paredit.vim'       , {'for': 'clojure'}    " Easy parens management

" Ctags
Plug 'majutsushi/tagbar'                " Navigate ctags
Plug 'xolox/vim-easytags'               " Generate ctags

" Tmux
Plug 'christoomey/vim-tmux-navigator'   " Navigate between vim splits and tmux panes

""" Useful but currently not in use

" Plugin 'tpope/vim-surround'               " Surround words

" Haskell
" Plugin 'bitc/vim-hdevtools'               " Provide type information
" Plugin 'eagletmt/ghcmod-vim'              " Load buffer in ghc, infer types
" Plugin 'eagletmt/neco-ghc'                " Auto completion
" Plugin 'vim-scripts/Haskell-Conceal'      " Replace characters with unicode equivalents
" Plugin 'wlangstroth/vim-haskell'          " syntax highlighting

call plug#end()
filetype plugin indent on

""""""""""""""""""""""""
""" General settings """
""""""""""""""""""""""""

syntax on                   " Enable syntax highlighting
set t_Co=256                " Set terminal colours
set backspace=2
set number                  " Enable line numbers
set autoread                " Refresh buffers if they were changed from outside
set splitright              " Split new buffers to the right
set splitbelow              " Split new buffers below
set mouse=a                 " Enable mouse
set encoding=utf8
set nowrap

set nocursorline            " Don't paint cursor line (scrolling becomes painfully slow)
set nocursorcolumn          " Don't paint cursor column (scrolling becomes painfully slow)
set lazyredraw              " Wait to redraw

set hlsearch                " Highlight search matches
set incsearch               " Highlight search matches as you type

set ignorecase              " Ignore case when searching
set smartcase               " Ignore case if pattern is lowercase, case-sensitive otherwise

set nobackup                " Disable backup
set directory=~/.vim/tmp    " Temporary swap files directory

set nolist                  " Do not highlight whitespaces by default
set listchars=tab:▸\ ,eol:¬ " Display tabs as ▸, end of line as `¬`

set guioptions+=a           " Copy highlighted text to system clipboard
set guioptions-=r           " Remove scrollbars
set guioptions-=L

" set noshowmode              " Hide the default mode text

set background=dark
colorscheme gruvbox         " Set default color scheme

set tabstop=2               " Soft tab indentation with 2 spaces
set shiftwidth=2

set smarttab
set expandtab               " Use spaces instead of tabs

set laststatus=2            " Always show status bar

set clipboard=unnamed       " Needed for clipboard integration

let mapleader = "\<Space>"  " Remap leader to Space

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set guitablabel=%M\ %t
endif

""""""""""""""""""""""""""""
""" OS-specific settings """
""""""""""""""""""""""""""""

if system("uname -s") == "Darwin\n"
  set guifont=Source\ Code\ Pro\ for\ Powerline:h14

  """ Powerline """
  source /usr/local/lib/python2.7/site-packages/powerline/bindings/vim/plugin/powerline.vim
endif

""""""""""""""""""""""""""""""""
""" Plugin-specific settings """
""""""""""""""""""""""""""""""""

""" Syntastic """
let g:syntastic_auto_loc_list=1
let g:syntastic_mode_map = { "mode": "active", "passive_filetypes": ["sbt", "scala"] }

map <silent> <Leader>e :Errors<CR>
map <Leader>s :SyntasticToggleMode<CR>

""" Unite """
call unite#custom#source('file,file/new,buffer,file_rec,file_rec/async,file_mru', 'matchers', ['matcher_fuzzy', 'converter_relative_word'])
call unite#custom#source('file,file/new,buffer,file_rec,file_rec/async,file_mru', 'sorters', 'sorter_rank')

call unite#custom#source('file,file_rec,file_rec/async', 'ignore_pattern',
      \'tmp\|vendor\|\.bundle\|target\|\.git\|log/\|logs\|out/')

function! UniteClearCache()
  let result = system("rm ~/.cache/unite -rf")
endfunction
command! UniteClearCache call UniteClearCache()

autocmd FileType unite call s:unite_settings()

function! s:unite_settings()
  let b:SuperTabDisabled=1
  imap <buffer><C-j> <Plug>(unite_select_next_line)
  imap <buffer><C-k> <Plug>(unite_select_previous_line)

  imap <silent><buffer><expr> <C-s> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  nmap <silent><buffer><expr> <C-s> unite#do_action('split')
  nmap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

  nmap <buffer> <Esc> <Plug>(unite_exit)
endfunction

" Search files
nnoremap <C-p> :Unite -buffer-name=files -start-insert file_rec/async:!<cr>

" Go through recently opened files
nnoremap <C-o> :Unite -no-split -buffer-name=mru -start-insert file_mru<cr>

" Grep in files
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
        \ '--line-numbers --nocolor --nogroup --hidden --ignore ''.git'''

  let g:unite_source_rec_async_command= 'ag --nocolor --nogroup --hidden -g ""'
else
  let g:unite_source_grep_command = 'grep'
endif

let g:unite_source_grep_recursive_opt = ''

nnoremap <C-g> :Unite grep:. <cr>

" Yank history
let g:unite_source_history_yank_enable = 1
nnoremap <C-y> :Unite history/yank<cr>

""" ctags """
set tags=.tags,tags,.git/tags
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 2
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

"" vim-notes """
let g:notes_directories = ['~/Notes']

""" vim-scala """
let g:scala_sort_across_groups = 1          " Sort imports in groups

""" Rainbow parentheses """
au VimEnter * RainbowParenthesesActivate
au Syntax   * RainbowParenthesesLoadRound
au Syntax   * RainbowParenthesesLoadSquare
au Syntax   * RainbowParenthesesLoadBraces

""" DelimitMate """
au Filetype clojure let b:loaded_delimitMate = 1
let delimitMate_autoclose = 1
let delimitMate_expand_cr = 1

""" Paredit """
let g:paredit_leader          = '\'
let g:paredit_electric_return = 1   " Insert an empty line if Enter is pressed before a closing paren
let g:paredit_smartjump       = 1   " When pressing '(' jump to the nearest '(', '[', '{'

" Enable short mappings only for Clojure files (to avoid J, O and other " mappings to be permanently overwritten)
au Filetype clojure let g:paredit_shortmaps = 1

""" vim-expand-selection """
vmap     v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

""" vim-hardtime """
let g:hardtime_default_on = 0

let g:list_of_normal_keys = ["h", "j", "k", "l"]
let g:list_of_visual_keys = ["h", "j", "k", "l"]
let g:list_of_insert_keys = []

" disable hardtime in unite & vim-vinegar buffers
let g:hardtime_ignore_buffer_patterns = [ "[unite].*", "*/*" ]

""" staircase
" let g:staircase_use_sbt = 1

""""""""""""""""
""" Mappings """
""""""""""""""""

" Quickly edit and source ~/.vimrc
nmap <silent> <Leader>ev :tabnew $MYVIMRC<CR>
nmap <silent> <Leader>sv :source $MYVIMRC<CR>

" Quickly install new plugins
nmap <silent> <Leader>pi :PluginInstall<CR>

" Use ; to write commands, insteaf of :
nnoremap ; :
vnoremap ; :

" Use jk to return to Normal Mode
inoremap jk <Esc>

" clear search highlightings
nmap <silent> <Leader>l :nohlsearch<CR>

" clipboard shortcuts
nmap <Leader>dd "+dd
vmap <Leader>d "+d
nmap <Leader>yy "+yy
vmap <Leader>y "+y
nmap <Leader>p "+p
vmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>P "+P

" resize split panes with arrows
if bufwinnr(1)
  nmap <Up> <C-w>+
  nmap <Down> <C-w>-
  nmap <Right> <C-w>>
  nmap <Left> <C-w><
endif

nmap <silent> <leader>b :TagbarToggle<CR>

"""""""""""""""""""""""""""
""" File types settings """
"""""""""""""""""""""""""""

" Provide autocompletion options for tags in css, html files
" (triggered with <C-x><C-o>)
autocmd FileType css  set omnifunc=htmlcomplete#CompleteTags
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

" Set filetype
au BufRead,BufNewFile *.md                setlocal filetype=markdown
au BufRead,BufNewFile *.sbt               setlocal filetype=sbt
au BufRead,BufNewFile *.scala             setlocal filetype=scala

""""""""""""""""""""""""""""""""""
""" File manipulation settings """
""""""""""""""""""""""""""""""""""

" Remove trailing whitespaces on save
autocmd BufWritePre *.* :%s/\s\+$//e

" Reload when entering buffer or gaining focus
au FocusGained,BufEnter * :silent! !

" Autosave on focus lost or when exiting the buffer
" au FocusLost,WinLeave * :silent! w

